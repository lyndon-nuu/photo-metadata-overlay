name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test-compatibility:
    name: Test Platform Compatibility
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: photo-metadata-overlay/package-lock.json
      
      - name: Install dependencies
        working-directory: photo-metadata-overlay
        run: npm ci
      
      - name: Run compatibility tests
        working-directory: photo-metadata-overlay
        run: node scripts/test-platform-compatibility.js
      
      - name: Upload compatibility report
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-report
          path: photo-metadata-overlay/platform-compatibility-report.json

  build:
    name: Build for ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    needs: test-compatibility
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-x86_64'
            os: 'macos-latest'
            target: 'x86_64-apple-darwin'
          - platform: 'macos-aarch64'
            os: 'macos-latest'
            target: 'aarch64-apple-darwin'
          - platform: 'linux-x86_64'
            os: 'ubuntu-20.04'
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-x86_64'
            os: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: photo-metadata-overlay/package-lock.json

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './photo-metadata-overlay/src-tauri -> target'

      - name: Install Linux dependencies
        if: matrix.platform == 'linux-x86_64'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install frontend dependencies
        working-directory: photo-metadata-overlay
        run: npm ci

      - name: Build frontend
        working-directory: photo-metadata-overlay
        run: npm run build

      - name: Build Tauri app
        working-directory: photo-metadata-overlay
        run: npm run tauri build -- --target ${{ matrix.target }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-x86_64' || matrix.platform == 'macos-aarch64'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: |
            photo-metadata-overlay/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            photo-metadata-overlay/src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'linux-x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: |
            photo-metadata-overlay/src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            photo-metadata-overlay/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
            photo-metadata-overlay/src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}
          path: |
            photo-metadata-overlay/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            photo-metadata-overlay/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Display structure of downloaded files
        run: ls -la artifacts/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.app
            artifacts/**/*.deb
            artifacts/**/*.AppImage
            artifacts/**/*.rpm
            artifacts/**/*.msi
            artifacts/**/*.exe
          draft: true
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
      - name: Download compatibility report
        uses: actions/download-artifact@v4
        with:
          name: compatibility-report
          path: reports
      
      - name: Generate build summary
        run: |
          echo "# Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Platform Compatibility Test" >> $GITHUB_STEP_SUMMARY
          if [ -f "reports/platform-compatibility-report.json" ]; then
            echo "✅ Compatibility test completed" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat reports/platform-compatibility-report.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Compatibility test failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Build Status" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| macOS x86_64 | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS ARM64 | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux x86_64 | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Windows x86_64 | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY