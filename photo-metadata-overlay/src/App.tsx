import { ConfigProvider } from 'antd';
import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useAppStore, useSettingsStore } from './stores';
import { FileSelector } from './components/FileSelector/FileSelector';
import { FileManager } from './components/FileManager/FileManager';
import { ImagePreview } from './components/ImagePreview/ImagePreview';
import { SettingsPanel } from './components/SettingsPanel/SettingsPanel';
import { SettingsManager } from './components/SettingsManager/SettingsManager';
import { BatchProcessor } from './components/BatchProcessor/BatchProcessor';
import { EnhancedToolbar } from './components/Toolbar/EnhancedToolbar';
import { KeyboardShortcutManager } from './components/KeyboardShortcutManager';
import { ShortcutHelp, FloatingShortcutHints } from './components/UI/ShortcutHelp';
import { SmartPresetSelector } from './components/UI/SmartPresetSelector';
import { SessionRecoveryDialog } from './components/UI/SessionRecoveryDialog';

import { LoadingSpinner } from './components/UI/LoadingSpinner';
import { ToastContainer } from './components/UI/Toast';
import { StatusBar, StatusBarContainer } from './components/StatusBar';
import { ErrorBoundary } from './components/ErrorBoundary';
import { useFileManager } from './hooks/useFileManager';
import { useAutoSave } from './hooks/useAutoSave';
import { useUndoRedo } from './hooks/useUndoRedo';
import { useToast } from './hooks/useToast';
import { useAppStatus } from './hooks/useAppStatus';
import { useFileSave } from './hooks/useFileSave';
import { FileSelectedEvent, PhotoMetadata, OverlaySettings, FrameSettings, ImageProcessingSettings } from './types';
import { DEFAULT_OVERLAY_SETTINGS, DEFAULT_FRAME_SETTINGS, DEFAULT_IMAGE_PROCESSING_SETTINGS } from './constants/design-tokens';
import { storageService } from './services/storage.service';
import { templateService, PresetTemplate } from './services/template.service';
import { appInitializer } from './utils/app-initializer';
import './App.css';

// Ê∑ªÂä†ÊºîÁ§∫Ê®°ÂºèÊ£ÄÊü•
const isDemoMode = window.location.search.includes('demo=true');

function App() {
  // Â¶ÇÊûúÊòØÊºîÁ§∫Ê®°ÂºèÔºåÊòæÁ§∫ÊºîÁ§∫ÁªÑ‰ª∂
  if (isDemoMode) {
    const { AnimationDemo } = require('./demo/AnimationDemo');
    return <AnimationDemo />;
  }
  const { isLoading, error } = useAppStore();
  const { loadSettings } = useSettingsStore();
  
  // State for preview functionality
  const [selectedPhoto, setSelectedPhoto] = useState<PhotoMetadata | null>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [overlaySettings, setOverlaySettings] = useState<OverlaySettings>(DEFAULT_OVERLAY_SETTINGS);
  const [frameSettings, setFrameSettings] = useState<FrameSettings>(DEFAULT_FRAME_SETTINGS);
  const [imageProcessingSettings, setImageProcessingSettings] = useState<ImageProcessingSettings>(DEFAULT_IMAGE_PROCESSING_SETTINGS);
  const [processedBlob, setProcessedBlob] = useState<Blob | null>(null);
  const [showSettingsManager, setShowSettingsManager] = useState(false);
  const [showBatchProcessor, setShowBatchProcessor] = useState(false);
  
  // Áî®Êà∑‰ΩìÈ™åÂ¢ûÂº∫ÂäüËÉΩÁä∂ÊÄÅ
  const [showPresetSelector, setShowPresetSelector] = useState(false);
  const [showSessionRecovery, setShowSessionRecovery] = useState(false);
  const [recoveryProgress, setRecoveryProgress] = useState<any>(null);
  
  // Map to store original File objects by filename
  const [fileMap, setFileMap] = useState<Map<string, File>>(new Map());

  // Ëá™Âä®‰øùÂ≠òHook
  const { loadWorkProgress, clearWorkProgress } = useAutoSave(overlaySettings, frameSettings);
  
  // Êí§ÈîÄÈáçÂÅöHook
  const undoRedo = useUndoRedo({
    maxHistorySize: 50,
    initialState: { overlaySettings, frameSettings },
    onStateChange: (state) => {
      setOverlaySettings(state.overlaySettings);
      setFrameSettings(state.frameSettings);
    },
  });
  
  // ToastÈÄöÁü•Hook
  const { toasts, removeToast, success } = useToast();
  
  // Â∫îÁî®Áä∂ÊÄÅÁÆ°ÁêÜHook
  const { 
    currentStatus, 
    setLoading, 
    setSuccess, 
    setError, 
    setIdle
  } = useAppStatus();

  // Êñá‰ª∂‰øùÂ≠òHook
  const { saveImage } = useFileSave({
    onSaveStart: () => setLoading('Ê≠£Âú®‰øùÂ≠òÂõæÁâá...'),
    onSaveSuccess: (savedPath) => {
      setSuccess(`ÂõæÁâáÂ∑≤‰øùÂ≠òÂà∞: ${savedPath}`);
    },
    onSaveError: (error) => {
      setError(`‰øùÂ≠òÂ§±Ë¥•: ${error}`);
    },
    onSaveCancel: () => {
      setIdle();
    }
  });

  // ÂàùÂßãÂåñÂ∫îÁî®Á®ãÂ∫èÂíåÂä†ËΩΩËÆæÁΩÆ
  useEffect(() => {
    const initializeApp = async () => {
      try {
        setLoading('Ê≠£Âú®ÂàùÂßãÂåñÂ∫îÁî®Á®ãÂ∫è...');
        
        // ÂàùÂßãÂåñÂ∫îÁî®Á®ãÂ∫è
        await appInitializer.initialize();
        
        // Âä†ËΩΩÁî®Êà∑ËÆæÁΩÆ
        await loadSettings();
        
        // Âä†ËΩΩÂè†Âä†„ÄÅÁõ∏Ê°ÜÂíåÂõæÂÉèÂ§ÑÁêÜËÆæÁΩÆ
        const [savedOverlaySettings, savedFrameSettings, savedImageProcessingSettings] = await Promise.all([
          storageService.loadOverlaySettings(),
          storageService.loadFrameSettings(),
          storageService.loadImageProcessingSettings(),
        ]);
        
        setOverlaySettings(savedOverlaySettings);
        setFrameSettings(savedFrameSettings);
        setImageProcessingSettings(savedImageProcessingSettings);
        
        // Êõ¥Êñ∞ÂõæÂÉèÂ§ÑÁêÜÊúçÂä°ÁöÑËÆæÁΩÆ
        const { imageProcessingService } = await import('./services/image-processing.service');
        imageProcessingService.updateSettings(savedImageProcessingSettings);
        
        // Ê£ÄÊü•ÊòØÂê¶ÊúâÊú™ÂÆåÊàêÁöÑÂ∑•‰Ωú‰ºöËØù
        const workProgress = await loadWorkProgress();
        if (workProgress) {
          setRecoveryProgress(workProgress);
          setShowSessionRecovery(true);
        }
        
        setSuccess('Â∫îÁî®Á®ãÂ∫èÂàùÂßãÂåñÂÆåÊàê');
        console.log('Â∫îÁî®Á®ãÂ∫èÂàùÂßãÂåñÂÆåÊàê');
      } catch (error) {
        console.error('Â∫îÁî®Á®ãÂ∫èÂàùÂßãÂåñÂ§±Ë¥•:', error);
        setError('Â∫îÁî®Á®ãÂ∫èÂàùÂßãÂåñÂ§±Ë¥•ÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï');
      }
    };

    initializeApp();
  }, [loadSettings, loadWorkProgress, setLoading, setSuccess, setError]);
  
  const {
    selectedFiles,
    isProcessing,
    progress,
    errors,
    handleFilesSelected,
    removeFile,
    clearFiles,
    clearErrors,
    getFileStats,
    exportFileList,
  } = useFileManager({
    maxFiles: 100,
    allowDuplicates: false,
  });

  const stats = getFileStats();

  const handleFileSelection = (event: FileSelectedEvent) => {
    try {
      setLoading('Ê≠£Âú®Âä†ËΩΩÊñá‰ª∂...');
      
      // Store original File objects in the map
      const newFileMap = new Map(fileMap);
      event.files.forEach(file => {
        newFileMap.set(file.name, file);
      });
      setFileMap(newFileMap);
      
      handleFilesSelected(event);
      
      // ÊòæÁ§∫ÊàêÂäüÈÄöÁü•ÂíåÁä∂ÊÄÅ
      if (event.files.length > 0) {
        setSuccess(`Â∑≤ÊàêÂäüÂä†ËΩΩ ${event.files.length} ‰∏™Êñá‰ª∂`);
        // Âè™Âú®Âä†ËΩΩÂ§ö‰∏™Êñá‰ª∂Êó∂ÊòæÁ§∫ÈÄöÁü•
        if (event.files.length > 1) {
          success(
            'ÊâπÈáèÊñá‰ª∂Âä†ËΩΩÊàêÂäü',
            `Â∑≤ÊàêÂäüÂä†ËΩΩ ${event.files.length} ‰∏™Êñá‰ª∂`
          );
        }
      }
      
      // Auto-select first file for preview
      if (event.files.length > 0 && !selectedFile) {
        const firstFile = event.files[0];
        setSelectedFile(firstFile);
        
        // Find corresponding PhotoMetadata (may not be available immediately due to async processing)
        setTimeout(() => {
          const photoMetadata = selectedFiles.find(f => f.fileName === firstFile.name);
          if (photoMetadata) {
            setSelectedPhoto(photoMetadata);
          }
        }, 100);
      }
    } catch (error) {
      setError('Êñá‰ª∂Âä†ËΩΩÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
      console.error('Êñá‰ª∂ÈÄâÊã©ÈîôËØØ:', error);
    }
  };

  const handlePhotoSelect = (photo: PhotoMetadata, file: File) => {
    setSelectedPhoto(photo);
    // Use the original file from our map instead of the passed file
    const originalFile = fileMap.get(photo.fileName);
    if (originalFile) {
      setSelectedFile(originalFile);
    } else {
      // Fallback to the passed file if not found in map
      setSelectedFile(file);
    }
  };

  const handleOverlaySettingsChange = (newSettings: OverlaySettings) => {
    setOverlaySettings(newSettings);
  };

  const handleFrameSettingsChange = (newSettings: FrameSettings) => {
    setFrameSettings(newSettings);
  };

  const handleImageProcessingSettingsChange = async (newSettings: ImageProcessingSettings) => {
    setImageProcessingSettings(newSettings);
    
    // Á´ãÂç≥Êõ¥Êñ∞ÂõæÂÉèÂ§ÑÁêÜÊúçÂä°ÁöÑËÆæÁΩÆ
    const { imageProcessingService } = await import('./services/image-processing.service');
    imageProcessingService.updateSettings(newSettings);
    
    // ‰øùÂ≠òËÆæÁΩÆÂà∞Êú¨Âú∞Â≠òÂÇ®
    try {
      await storageService.saveImageProcessingSettings(newSettings);
      console.log('ÂõæÂÉèÂ§ÑÁêÜËÆæÁΩÆÂ∑≤‰øùÂ≠ò');
    } catch (error) {
      console.error('‰øùÂ≠òÂõæÂÉèÂ§ÑÁêÜËÆæÁΩÆÂ§±Ë¥•:', error);
    }
  };

  const handleProcessingComplete = (blob: Blob) => {
    setProcessedBlob(blob);
    // Âè™Âú®È¶ñÊ¨°Â§ÑÁêÜÂÆåÊàêÊó∂ÊòæÁ§∫ÈÄöÁü•ÔºåÈÅøÂÖçËÆæÁΩÆÊõ¥ÊîπÊó∂ÈáçÂ§çÈÄöÁü•
    if (!processedBlob) {
      success('ÂõæÂÉèÂ§ÑÁêÜÂÆåÊàê', 'ÂõæÂÉèÂ∑≤ÊàêÂäüÂ§ÑÁêÜÔºåÂèØ‰ª•‰∏ãËΩΩ‰∫Ü');
    }
  };

  // üéØ Á∫ØÂâçÁ´Ø‰øùÂ≠òÂáΩÊï∞ - ‰∏éÈ¢ÑËßà100%‰∏ÄËá¥
  const handleDownload = async () => {
    if (!selectedPhoto || !selectedFile) {
      setError('ËØ∑ÂÖàÈÄâÊã©‰∏ÄÂº†ÂõæÁâá');
      return;
    }

    // ‰ΩøÁî®Á∫ØÂâçÁ´Ø‰øùÂ≠òÈÄªËæëÔºåÁ°Æ‰øù‰∏éÈ¢ÑËßàÂÆåÂÖ®‰∏ÄËá¥
    const quality = selectedFile.type.includes('png') ? 100 : 95;
    await saveImage(selectedFile, selectedPhoto, overlaySettings, frameSettings, quality);
  };



  // Áî®Êà∑‰ΩìÈ™åÂäüËÉΩÂ§ÑÁêÜÂáΩÊï∞
  const handleUndo = () => {
    undoRedo.undo();
    success('Êí§ÈîÄÊàêÂäü', 'Â∑≤Êí§ÈîÄ‰∏ä‰∏ÄÊ≠•Êìç‰Ωú');
  };

  const handleRedo = () => {
    undoRedo.redo();
    success('ÈáçÂÅöÊàêÂäü', 'Â∑≤ÈáçÂÅöÊìç‰Ωú');
  };

  const handleApplyPreset = async (preset: PresetTemplate) => {
    try {
      setOverlaySettings(preset.overlaySettings);
      setFrameSettings(preset.frameSettings);
      
      // ËÆ∞ÂΩïÂà∞Êí§ÈîÄÈáçÂÅöÂéÜÂè≤
      undoRedo.pushState(
        { overlaySettings: preset.overlaySettings, frameSettings: preset.frameSettings },
        'apply-preset',
        `Â∫îÁî®È¢ÑËÆæ: ${preset.name}`
      );
      
      // ËÆ∞ÂΩïÊ®°Êùø‰ΩøÁî®
      await templateService.recordTemplateUsage(preset.id);
      
      setShowPresetSelector(false);
      success('È¢ÑËÆæÂ∫îÁî®ÊàêÂäü', `Â∑≤Â∫îÁî®È¢ÑËÆæ: ${preset.name}`);
    } catch (error) {
      console.error('Â∫îÁî®È¢ÑËÆæÂ§±Ë¥•:', error);
      setError('Â∫îÁî®È¢ÑËÆæÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
    }
  };

  const handleRestoreSession = () => {
    if (recoveryProgress) {
      // ÊÅ¢Â§çÁä∂ÊÄÅ
      if (recoveryProgress.overlaySettings) {
        setOverlaySettings(recoveryProgress.overlaySettings);
      }
      if (recoveryProgress.frameSettings) {
        setFrameSettings(recoveryProgress.frameSettings);
      }
      if (recoveryProgress.currentPhoto) {
        setSelectedPhoto(recoveryProgress.currentPhoto);
      }
      if (recoveryProgress.selectedFiles.length > 0) {
        // ËøôÈáåÈúÄË¶ÅÊ†πÊçÆÂÆûÈôÖÊÉÖÂÜµÊÅ¢Â§çÊñá‰ª∂ÂàóË°®
        console.log('ÊÅ¢Â§çÊñá‰ª∂ÂàóË°®:', recoveryProgress.selectedFiles);
      }

      setShowSessionRecovery(false);
      setRecoveryProgress(null);
      success('‰ºöËØùÊÅ¢Â§çÊàêÂäü', 'Â∑≤ÊÅ¢Â§ç‰∏äÊ¨°ÁöÑÂ∑•‰ΩúËøõÂ∫¶');
    }
  };

  const handleDiscardSession = () => {
    clearWorkProgress();
    setShowSessionRecovery(false);
    setRecoveryProgress(null);
  };

  return (
    <ErrorBoundary>
      <ConfigProvider
        theme={{
          token: {
            colorPrimary: '#1890ff',
            borderRadius: 8,
            fontSize: 14,
          },
        }}
      >
        <div className="h-screen bg-gray-50 flex flex-col overflow-hidden">
        {/* Â¢ûÂº∫ÁöÑÂ∑•ÂÖ∑Ê†è */}
        <EnhancedToolbar
          onOpenFile={() => {
            // Ëß¶ÂèëÊñá‰ª∂ÈÄâÊã©Âô®
            const input = document.createElement('input');
            input.type = 'file';
            input.multiple = true;
            input.accept = 'image/*';
            input.onchange = (e) => {
              const files = Array.from((e.target as HTMLInputElement).files || []);
              if (files.length > 0) {
                handleFileSelection({ files, source: 'file-input' });
              }
            };
            input.click();
          }}
          onSaveFile={handleDownload}
          onBatchProcess={() => setShowBatchProcessor(true)}
          onShowPresets={() => setShowPresetSelector(true)}
          onShowSettings={() => setShowSettingsManager(true)}
          onShowShortcuts={() => {
            const event = new CustomEvent('app:show-help');
            window.dispatchEvent(event);
          }}
          canUndo={undoRedo.canUndo}
          canRedo={undoRedo.canRedo}
          onUndo={handleUndo}
          onRedo={handleRedo}
          undoDescription={undoRedo.getUndoDescription()}
          redoDescription={undoRedo.getRedoDescription()}
        />

        {/* ÈîÆÁõòÂø´Êç∑ÈîÆÁÆ°ÁêÜÂô® */}
        <KeyboardShortcutManager
          onOpenFile={() => {
            const input = document.createElement('input');
            input.type = 'file';
            input.multiple = true;
            input.accept = 'image/*';
            input.onchange = (e) => {
              const files = Array.from((e.target as HTMLInputElement).files || []);
              if (files.length > 0) {
                handleFileSelection({ files, source: 'file-input' });
              }
            };
            input.click();
          }}
          onSaveFile={handleDownload}
          onBatchProcess={() => setShowBatchProcessor(true)}
          onUndo={handleUndo}
          onRedo={handleRedo}
          onShowPresets={() => setShowPresetSelector(true)}
          onShowHelp={() => {
            const event = new CustomEvent('app:show-help');
            window.dispatchEvent(event);
          }}
          onToggleShortcutHints={() => {
            const event = new CustomEvent('app:toggle-shortcuts-hint');
            window.dispatchEvent(event);
          }}
          onDeleteSelected={() => {
            if (selectedPhoto) {
              removeFile(selectedPhoto.fileName);
              setSelectedPhoto(null);
              setSelectedFile(null);
            }
          }}
          onCancel={() => {
            // ÂÖ≥Èó≠ÊâÄÊúâÊ®°ÊÄÅÊ°Ü
            setShowSettingsManager(false);
            setShowBatchProcessor(false);
            setShowPresetSelector(false);
          }}
        />

        <main className="flex-1 px-4 py-4 overflow-hidden">
          <AnimatePresence>
            {isLoading && (
              <motion.div 
                className="flex justify-center items-center h-64"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                transition={{ duration: 0.3 }}
              >
                <LoadingSpinner size="lg" text="Âä†ËΩΩ‰∏≠..." />
              </motion.div>
            )}
          </AnimatePresence>

          <AnimatePresence>
            {error && (
              <motion.div 
                className="bg-red-50 border border-red-200 rounded-md p-4 mb-6"
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
              >
                <div className="flex">
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-red-800">ÈîôËØØ</h3>
                    <div className="mt-2 text-sm text-red-700">
                      <p>{error?.message || 'ÂèëÁîü‰∫Ü‰∏Ä‰∏™ÈîôËØØ'}</p>
                    </div>
                  </div>
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          <div className="flex h-full gap-4 min-h-0">
            {/* Left Panel - File Selection and Management */}
            <motion.div 
              className="w-80 lg:w-72 xl:w-80 flex-shrink-0 flex flex-col h-full min-h-0"
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5, delay: 0.1 }}
            >
              <div className="flex-1 space-y-4 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100 pr-2 min-h-0">
              <motion.div 
                className="card"
                whileHover={{ scale: 1.02 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <h2 className="text-lg font-medium text-gray-900 mb-4">
                  Êñá‰ª∂ÈÄâÊã©
                </h2>
                <FileSelector
                  onFilesSelected={handleFileSelection}
                  selectedFiles={selectedFiles}
                  onFileRemove={removeFile}
                  multiple={true}
                  allowFolder={true}
                  showPreview={true}
                  disabled={isProcessing}
                />
              </motion.div>

              {/* File Management */}
              <motion.div 
                className="card"
                whileHover={{ scale: 1.02 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <h2 className="text-lg font-medium text-gray-900 mb-4">
                  Êñá‰ª∂ÁÆ°ÁêÜ
                </h2>
                <FileManager
                  files={selectedFiles}
                  errors={errors}
                  isProcessing={isProcessing}
                  onFileRemove={removeFile}
                  onClearAll={clearFiles}
                  onClearErrors={clearErrors}
                  onExportList={exportFileList}
                  onFileSelect={handlePhotoSelect}
                  selectedFile={selectedPhoto}
                />
              </motion.div>

              {/* Processing Progress */}
              <AnimatePresence>
                {isProcessing && (
                  <motion.div 
                    className="card"
                    initial={{ opacity: 0, scale: 0.95 }}
                    animate={{ opacity: 1, scale: 1 }}
                    exit={{ opacity: 0, scale: 0.95 }}
                    transition={{ duration: 0.3 }}
                  >
                    <h3 className="text-md font-medium text-gray-900 mb-3">
                      Â§ÑÁêÜËøõÂ∫¶
                    </h3>
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm text-gray-600">
                        <span>Ê≠£Âú®Â§ÑÁêÜ: {progress.fileName}</span>
                        <span>{progress.current} / {progress.total}</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <motion.div 
                          className="bg-blue-600 h-2 rounded-full"
                          initial={{ width: 0 }}
                          animate={{ 
                            width: `${progress.total > 0 ? (progress.current / progress.total) * 100 : 0}%` 
                          }}
                          transition={{ duration: 0.5, ease: "easeOut" }}
                        />
                      </div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>

              {/* File Statistics */}
              <AnimatePresence>
                {stats.totalFiles > 0 && (
                  <motion.div 
                    className="card"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.3 }}
                    whileHover={{ scale: 1.02 }}
                  >
                    <h3 className="text-md font-medium text-gray-900 mb-3">
                      Êñá‰ª∂ÁªüËÆ°
                    </h3>
                    <motion.div 
                      className="grid grid-cols-2 gap-4 text-sm"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: 0.2, staggerChildren: 0.1 }}
                    >
                      <motion.div
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                      >
                        <span className="text-gray-600">ÊÄªÊñá‰ª∂Êï∞:</span>
                        <span className="ml-2 font-medium text-gray-900">
                          {stats.totalFiles}
                        </span>
                      </motion.div>
                      <motion.div
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: 0.1 }}
                      >
                        <span className="text-gray-600">ÊÄªÂ§ßÂ∞è:</span>
                        <span className="ml-2 font-medium text-gray-900">
                          {(stats.totalSize / (1024 * 1024)).toFixed(2)} MB
                        </span>
                      </motion.div>
                      <motion.div
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: 0.2 }}
                      >
                        <span className="text-gray-600">ÈîôËØØÊï∞:</span>
                        <span className="ml-2 font-medium text-red-600">
                          {stats.errorCount}
                        </span>
                      </motion.div>
                      <motion.div
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: 0.3 }}
                      >
                        <span className="text-gray-600">Êñá‰ª∂Á±ªÂûã:</span>
                        <span className="ml-2 font-medium text-gray-900">
                          {Object.keys(stats.fileTypes).join(', ') || 'Êó†'}
                        </span>
                      </motion.div>
                    </motion.div>
                  </motion.div>
                )}
              </AnimatePresence>
              </div>
            </motion.div>

            {/* Center Panel - Real-time Preview */}
            <motion.div 
              className="flex-1 min-w-0 mx-4"
              initial={{ opacity: 0, scale: 0.95 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              <motion.div 
                className="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 h-full overflow-hidden"
                whileHover={{ scale: 1.005 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <ImagePreview
                  photo={selectedPhoto}
                  file={selectedFile}
                  overlaySettings={overlaySettings}
                  frameSettings={frameSettings}
                  onProcessingComplete={handleProcessingComplete}
                  onOverlaySettingsChange={handleOverlaySettingsChange}
                  className="h-full"
                />
              </motion.div>
            </motion.div>

            {/* Right Panel - Settings */}
            <motion.div 
              className="w-72 flex-shrink-0 flex flex-col h-full"
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5, delay: 0.3 }}
            >
              <div className="space-y-6 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100 pl-2">
              <motion.div 
                className="card"
                whileHover={{ scale: 1.02 }}
                transition={{ type: "spring", stiffness: 300 }}
              >
                <SettingsPanel
                  overlaySettings={overlaySettings}
                  frameSettings={frameSettings}
                  imageProcessingSettings={imageProcessingSettings}
                  onOverlayChange={handleOverlaySettingsChange}
                  onFrameChange={handleFrameSettingsChange}
                  onImageProcessingChange={handleImageProcessingSettingsChange}
                  disabled={!selectedPhoto}
                />
              </motion.div>

              {/* Export Controls */}
              <AnimatePresence>
                {processedBlob && (
                  <motion.div 
                    className="card"
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -20 }}
                    transition={{ duration: 0.3 }}
                    whileHover={{ scale: 1.02 }}
                  >
                    <h3 className="text-md font-medium text-gray-900 mb-3">
                      ÂØºÂá∫ÊéßÂà∂
                    </h3>
                    <div className="space-y-3">
                      <motion.button
                        className="w-full btn-primary"
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        onClick={handleDownload}
                      >
                        ‰∏ãËΩΩÂ§ÑÁêÜÂêéÁöÑÂõæÁâá
                      </motion.button>
                      <motion.div 
                        className="text-xs text-gray-500 text-center"
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 0.2 }}
                      >
                        ÂõæÁâáÂ§ßÂ∞è: {processedBlob ? (processedBlob.size / 1024).toFixed(1) : 0} KB
                      </motion.div>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
              </div>
            </motion.div>
          </div>
        </main>

        {/* Settings Manager Modal */}
        <AnimatePresence>
          {showSettingsManager && (
            <motion.div 
              className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.3 }}
              onClick={() => setShowSettingsManager(false)}
            >
              <motion.div 
                className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto"
                initial={{ opacity: 0, scale: 0.9, y: 20 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.9, y: 20 }}
                transition={{ duration: 0.3, type: "spring", stiffness: 300 }}
                onClick={(e) => e.stopPropagation()}
              >
                <SettingsManager onClose={() => setShowSettingsManager(false)} />
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Batch Processor Modal */}
        <AnimatePresence>
          {showBatchProcessor && (
            <motion.div 
              className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.3 }}
              onClick={() => setShowBatchProcessor(false)}
            >
              <motion.div 
                className="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-6xl w-full max-h-[90vh] overflow-y-auto"
                initial={{ opacity: 0, scale: 0.9, y: 20 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.9, y: 20 }}
                transition={{ duration: 0.3, type: "spring", stiffness: 300 }}
                onClick={(e) => e.stopPropagation()}
              >
                <div className="p-6">
                  <div className="flex items-center justify-between mb-6">
                    <motion.h2 
                      className="text-2xl font-bold text-gray-900 dark:text-gray-100"
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: 0.1 }}
                    >
                      ÊâπÈáèÂ§ÑÁêÜ
                    </motion.h2>
                    <motion.button
                      onClick={() => setShowBatchProcessor(false)}
                      className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                      initial={{ opacity: 0, rotate: -90 }}
                      animate={{ opacity: 1, rotate: 0 }}
                      transition={{ delay: 0.1 }}
                    >
                      <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </motion.button>
                  </div>
                  
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.2 }}
                  >
                    <BatchProcessor
                      files={selectedFiles}
                      fileMap={fileMap}
                      overlaySettings={overlaySettings}
                      frameSettings={frameSettings}
                      onComplete={(results) => {
                        console.log('ÊâπÈáèÂ§ÑÁêÜÂÆåÊàê:', results);
                        // ÂèØ‰ª•Âú®ËøôÈáåÊ∑ªÂä†ÂÆåÊàêÂêéÁöÑÂ§ÑÁêÜÈÄªËæë
                      }}
                      onProgress={(progress) => {
                        console.log('ÊâπÈáèÂ§ÑÁêÜËøõÂ∫¶:', progress);
                        // ÂèØ‰ª•Âú®ËøôÈáåÊ∑ªÂä†ËøõÂ∫¶Êõ¥Êñ∞ÁöÑÂ§ÑÁêÜÈÄªËæë
                      }}
                    />
                  </motion.div>
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
        
        {/* Âø´Êç∑ÈîÆÂ∏ÆÂä© */}
        <ShortcutHelp />

        {/* ÊµÆÂä®Âø´Êç∑ÈîÆÊèêÁ§∫ */}
        <FloatingShortcutHints />

        {/* ‰ºöËØùÊÅ¢Â§çÂØπËØùÊ°Ü */}
        <AnimatePresence>
          {showSessionRecovery && recoveryProgress && (
            <SessionRecoveryDialog
              workProgress={recoveryProgress}
              onRestore={handleRestoreSession}
              onDiscard={handleDiscardSession}
              onClose={() => handleDiscardSession()}
            />
          )}
        </AnimatePresence>

        {/* Êô∫ËÉΩÈ¢ÑËÆæÈÄâÊã©Âô® */}
        <AnimatePresence>
          {showPresetSelector && (
            <SmartPresetSelector
              onSelectPreset={handleApplyPreset}
              onClose={() => setShowPresetSelector(false)}

            />
          )}
        </AnimatePresence>
        
        {/* Toast Notifications */}
        <ToastContainer 
          toasts={toasts} 
          onClose={removeToast} 
          position="top-center" 
        />
        
        {/* Status Bar */}
        <AnimatePresence>
          {currentStatus.type !== 'idle' && (
            <StatusBarContainer>
              <StatusBar
                status={currentStatus.type}
                message={currentStatus.message}
                progress={currentStatus.progress}
                showProgress={currentStatus.type === 'loading' && typeof currentStatus.progress === 'number'}
                onClose={() => setIdle()}
              />
            </StatusBarContainer>
          )}
        </AnimatePresence>
      </div>
    </ConfigProvider>
    </ErrorBoundary>
  );
}

export default App;
